Problem Link: https://leetcode.com/problems/number-of-closed-islands/


class Solution {
public:
    
    bool valid(int i,int j,int m,int n){
        if(i>=0 && i<m && j>=0 && j<n)
            return true;
        return false;
    }
    
    void dfs(int i,int j,vector<vector<int>>& grid,vector<vector<int>>& vis,int m,int n){
        vis[i][j]=1;
        
        
        int delrow[]={-1,1,0,0};
        int delcol[]={0,0,-1,1};
        
        for(int k=0;k<4;k++){
            int nrow=i+delrow[k];
            int ncol=j+delcol[k];
            if(valid(nrow,ncol,m,n)&& vis[nrow][ncol]!=1 && grid[nrow][ncol]==0){
                dfs(nrow,ncol,grid,vis,m,n);
            }
        }
    }
    
    int closedIsland(vector<vector<int>>& grid) {
        int m=grid.size();
        int n=grid[0].size();
        vector<vector<int>> vis(m,vector<int>(n,0));
        int c=0;
        
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(vis[i][j]!=1 && (i*j==0 || i==m-1 ||j==n-1) && grid[i][j]==0){
                    dfs(i,j,grid,vis,m,n);
                }
            }
        }
        
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(vis[i][j]!=1 && grid[i][j]==0){
                     dfs(i,j,grid,vis,m,n);
                     c++;
                }
            }
        }
        return c;
    }
    
};

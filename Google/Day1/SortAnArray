Problem Link: https://leetcode.com/problems/sort-an-array/


class Solution {
public:

    void merge(int l,int r,int mid,vector<int>& arr){
        int m=mid-l+1;
        int n=r-mid;
        int left[m];
        int right[n];

        for(int i=0;i<m;i++){
            left[i]=arr[l+i];
        }
        
        for(int i=0;i<n;i++){
            right[i]=arr[mid+1+i];
        }
        int i=0;
        int j=0;
        int k=l;
        while(i<m && j<n){
            if(left[i] <= right[j]){
                arr[k]=left[i];
                i++;
            }
            else{
                arr[k]=right[j];
                j++;
            }
            k++;
        }
         while (i < m) {
            arr[k] = left[i];
            i++;
            k++;
        }
        while (j < n) {
            arr[k] = right[j];
            j++;
            k++;
        }

    }

    void mergeSort(int i,int j,vector<int>& nums){
        //cout<<i<<" "<<j<<"\n";
        if(i>=j) return;
        int mid=i+(j-i)/2;
        mergeSort(i,mid,nums);
        mergeSort(mid+1,j,nums);
        merge(i,j,mid,nums);
    }

    vector<int> sortArray(vector<int>& nums) {
        int n=nums.size();
        mergeSort(0,n-1,nums);
        return nums;
    }
};

[Problem link]{https://leetcode.com/problems/number-of-pairs-satisfying-inequality/description/)


class Solution {
public:
    class SegTree{
        public:
        vector<long long>tree;
        SegTree(int n){
            tree.resize(4*n,0);
        }
        
        void update(int l,int r,int ind,int tar){
            
            if(l>tar || r< tar)return;
            if(l==r){
                tree[ind]++;
                return;
            }
            int m=l+(r-l)/2;
            update(l,m,2*ind+1,tar);
            update(m+1,r,2*ind+2,tar);
            tree[ind]=tree[2*ind+1]+tree[2*ind+2];
        }
        
        
        long long query(int l,int r,int ind,int low,int high){
            if(l>high || r<low)return 0;
            if(low<=l and high>=r){
                return tree[ind];
            }
            int m=l+(r-l)/2;
            return query(l,m,2*ind+1,low,high)+query(m+1,r,2*ind+2,low,high);
        }
        
        
    };
    
    
    
    long long numberOfPairs(vector<int>& nums1, vector<int>& nums2, int diff) {
        int n=nums1.size();
        vector<long long>arr(n,0);
        for(int i=0;i<n;i++){
            arr[i]=nums1[i]-nums2[i];
        }

        long long ans=0;
        
       
        int top=40000,add=20000;
        auto pos=new SegTree(top);

        
        for(int i=0;i<n;i++){
            long long temp=arr[i]+diff+add;
            ans+=pos->query(0,top,0,0,temp);
            pos->update(0,top,0,arr[i]+add);
            
        }
        return ans;
    }
};

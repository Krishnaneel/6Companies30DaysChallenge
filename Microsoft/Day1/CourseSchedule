[Problem Link](https://leetcode.com/problems/course-schedule/)

class Solution {
public:
    bool canFinish(int n, vector<vector<int>>& pre) {
        vector<int> adj[n];
        vector<int> indegree(n,0);
        queue<int> q;
        vector<int> topo;
        
        //creating the adjecency list
        for(int i=0;i<pre.size();i++)
            adj[pre[i][0]].push_back(pre[i][1]);
        //creating the indegree list
        for(int i=0;i<n;i++){
            for(int j=0;j<adj[i].size();j++){
                indegree[adj[i][j]]++;
            }    
        }
        //topo sort starts
        for(int i=0;i<n;i++){
            if(indegree[i]==0)
                q.push(i);
        }
        
        while(!q.empty()){
            int t=q.front();
            q.pop();
            topo.push_back(t);
            
            for(int i=0;i<adj[t].size();i++){
                indegree[adj[t][i]]--;
                if(indegree[adj[t][i]]==0)
                    q.push(adj[t][i]);
            }
        }
        cout<<topo.size()<<" "<<n<<endl;
        return (topo.size()==n);
        
    }
};

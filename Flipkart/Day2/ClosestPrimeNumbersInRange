Problem Link: https://leetcode.com/problems/closest-prime-numbers-in-range/



class Solution {
public:
 
void SieveOfEratosthenes(int l,int n,vector<int>& ans)
{
    // Create a boolean array "prime[0..n]" and initialize
    // all entries it as true. A value in prime[i] will
    // finally be false if i is Not a prime, else true.
    bool prime[n + 1];
    memset(prime, true, sizeof(prime));
    prime[0]=false;
    prime[1]=false;
 
    for (int p = 2; p * p <= n; p++) {
        // If prime[p] is not changed, then it is a prime
        if (prime[p] == true) {
            // Update all multiples of p greater than or
            // equal to the square of it numbers which are
            // multiple of p and are less than p^2 are
            // already been marked.
            for (int i = p * p; i <= n; i += p)
                prime[i] = false;
        }
    }
    
    int c=0,diff=INT_MAX;
    queue<int>q;
    
    for(int i=l;i<=n;i++){
        if(prime[i]){
            q.push(i);
        }
        if(q.size()==2){
            int a=q.front();
            q.pop();
            int b=q.front();
            q.pop();
            if(abs(a-b)<diff){
                ans[0]=a;
                ans[1]=b;
                //cout<<a<<" "<<b<<endl;
                diff=abs(a-b);
            }
            q.push(b);
        }
           
    }
 
    
}
    
    
    vector<int> closestPrimes(int left, int right) {
        vector<int> ans(2,-1);
        SieveOfEratosthenes(left,right,ans);
        if(ans[1]==-1)
            return {-1,-1};
        return ans;
    }
};

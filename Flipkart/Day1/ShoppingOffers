Problem Link: https://leetcode.com/problems/shopping-offers/


class Solution {
public:

    int solve(vector<int>& price, vector<vector<int>>& special, vector<int> needs,map<vector<int>,int>& dp){
        int n=needs.size();
        int s=special.size();
        int ans=0;
        for(int i=0;i<n;i++){
            ans+=price[i]*needs[i];
        }

        if(dp.find(needs)!=dp.end()) return dp[needs];

        vector<int>temp=needs;

        for(int i=0;i<s;i++){
            needs=temp;
            bool flag=true;
            for(int j=0;j<n;j++){
                needs[j]=needs[j]-special[i][j];
                if(needs[j]<0){
                    flag=false;
                    break;
                }
            }
            if(flag){
                ans=min(ans,special[i][n]+solve(price,special,needs,dp));
            }
        }
        return dp[temp]=ans;
    }

    int shoppingOffers(vector<int>& price, vector<vector<int>>& special, vector<int>& needs) {
        map<vector<int>,int>dp;
        return solve(price,special,needs,dp);
    }
};

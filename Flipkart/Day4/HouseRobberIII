Problem Link: https://leetcode.com/problems/house-robber-iii/


class Solution{
   public:
  int dfs(TreeNode *root, map<TreeNode*, int> &m) {
        if (!root) return 0;

        if (m.find(root)!=m.end()) return m[root];

        int val = 0;
        if (root->left) {
            val += dfs(root->left->left, m) + dfs(root->left->right, m);
        }

        if (root->right) {
            val += dfs(root->right->left, m) + dfs(root->right->right, m);
        }
        val = max(val + root->val, dfs(root->left, m) + dfs(root->right, m));

        return m[root] = val;
    }

    int rob(TreeNode * root) {
        if (!root) return 0;

        map<TreeNode*, int> m;
        return dfs(root, m);
    }
};
